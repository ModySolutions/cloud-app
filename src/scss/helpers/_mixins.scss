@use "sass:map";
@use '../helpers/variables';
//=================================================================
// MIXINS
//=================================================================

//=================================================================
/* UTILITY MIXINS
//=================================================================
/* ---- invisible ---- */
@mixin invisible {
    position: absolute;
    opacity: 0;
    line-height: 0;
    height: 0;
    width: 0;
    overflow: hidden;
}

/* ---- bg-image ---- */
@mixin bg-image {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

/* normalize lists */
@mixin list-reset {
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
    li {
        padding-left: 0;
        padding-bottom: 0;
        margin-bottom: 0;
        line-height: 1;
        &::before {
            display: none;
        }
        a {
            border: 0;
        }
        a:not(.btn) {
            border: 0;
        }
    }
}

/* ---- get values function ---- */
@function map-get-values($map, $keys...) {
    @each $key in $keys {
        $map: map.get($map, $key);
    }
    @return $map;
}


@mixin set-container($width: variables.$container-width, $padding: variables.$container-padding) {
    max-width: calc(#{$width} + (#{$padding} * 2));
    padding-left: $padding;
    padding-right: $padding;
}

@mixin generate-spacing-classes($type, $name) {
    @each $key, $value in variables.$spacing-values {
        .#{$name}t-#{$key} { #{$type}-top: $value; }
        .#{$name}r-#{$key} { #{$type}-right: $value; }
        .#{$name}b-#{$key} { #{$type}-bottom: $value; }
        .#{$name}l-#{$key} { #{$type}-left: $value; }

        .#{$name}x-#{$key} { #{$type}-left: $value; #{$type}-right: $value; }
        .#{$name}y-#{$key} { #{$type}-top: $value; #{$type}-bottom: $value; }

        .#{$name}-#{$key} { #{$type}: $value; }
    }
}

@mixin generate-flex-classes {
    @each $direction in variables.$flex-directions {
        .flex-#{$direction} { flex-direction: #{$direction}; }
    }

    @each $value in variables.$justify-values {
        .justify-#{$value} { justify-content: #{$value}; }
    }

    // Alinear items
    @each $value in variables.$align-values {
        .items-#{$value} { align-items: #{$value}; }
        .content-#{$value} { align-content: #{$value}; }
    }

    // Alinear self
    @each $value in variables.$align-values {
        .self-#{$value} { align-self: #{$value}; }
    }
}

@mixin generate-grid-classes {
    @each $key, $value in variables.$grid-template-values {
        .grid-cols-#{$key} { grid-template-columns: #{$value}; }
    }

    @each $key, $value in variables.$grid-template-values {
        .grid-rows-#{$key} { grid-template-rows: #{$value}; }
    }

    @each $key, $value in variables.$gap-values {
        .gap-#{$key} { gap: $value; }
        .gap-x-#{$key} { column-gap: $value; }
        .gap-y-#{$key} { row-gap: $value; }
    }

    @each $value in variables.$justify-values {
        .justify-#{$value} { justify-content: #{$value}; }
    }

    @each $value in variables.$align-values {
        .items-#{$value} { align-items: #{$value}; }
    }
}

@mixin generate-flex-grid-utilities {
    .flex { display: flex; }

    .grid { display: grid; }

    @each $key, $value in variables.$gap-values {
        .gap-#{$key} { gap: $value; }
    }

    @include generate-flex-classes;
    @include generate-grid-classes;
}

@include generate-flex-grid-utilities;

@mixin border-radius($radius) {
    &.rounded {
        border-radius: $radius;
    }

    &.rounded-top {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }
    &.rounded-top-left {
        border-top-left-radius: $radius;
    }
    &.rounded-top-right {
        border-top-right-radius: $radius;
    }

    &.rounded-bottom {
        border-bottom-left-radius: $radius;
        border-bottom-right-radius: $radius;
    }
    &.rounded-bottom-left {
        border-bottom-left-radius: $radius;
    }
    &.rounded-bottom-right {
        border-bottom-right-radius: $radius;
    }

    &.rounded-left {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }

    &.rounded-right {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}

.radius {
    @include border-radius(variables.$border-radius-xs);
    &-sm {
        @include border-radius(variables.$border-radius-sm);
    }
    &-md {
        @include border-radius(variables.$border-radius-md);
    }
    &-lg {
        @include border-radius(variables.$border-radius-lg);
    }
}
